const ethers = require('ethers');
const {
    privateKey,
    rpcUrl
} = require('./pk.json');

// Connect to the Ethereum network using the provided RPC URL
const provider = new ethers.providers.JsonRpcProvider(rpcUrl);

// Create a wallet instance using the provided private key
const wallet = new ethers.Wallet(privateKey, provider);

// The address of the smart contract you want to interact with
const contractAddress = '0x00000000005bbb0ef59571e58418f9a4357b68a0';

// The input data you want to pass to the fallback function
const inputData = '0xed48907e0000000000000000000000003e000d33564dab9793cd8cde6a5957f5e5abafd1000000000000000000000000e11f9786b06438456b044b3e21712228adcaa0d10000000000000000000000000000000000000000000000000401081a528404f40000000000000000000000000000000000000000000000000021f1d121b159e400000000000000000000000000000000000000000000000000449275aa94dd970000000000000000000000000000000000000000000000000043e3a24362b3c9000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a0000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000028000000000000000000000000035751007a407ca6feffe80b3cb397736d2cf4dbe0000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000035751007a407ca6feffe80b3cb397736d2cf4dbe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c9b3e2c3ec88b1b4c0cd853f4321000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000003c24b1a4825d6fc2a547e71bcf8df646b3142e3b533f84276a0e10a2bddf8de453c1a2fe70f8d9f0000000000000000000000000000000000000000000000000000000066295d290000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000300000000000000000000000035751007a407ca6feffe80b3cb397736d2cf4dbe000000000000000000000000f28db483773e3616da91fdfa7b5d4090ac40cc590000000000000000000000009fcdd5b4cd9c7b550b93e85aec8b65033a20c15a0000000000000000000000009fcdd5b4cd9c7b550b93e85aec8b65033a20c15a00000000000000000000000000000000000000000000000038659491025db64000000000000000000000000000000000000000000000000006f0f5185a14dc5a0000000000000000000000000000000000000000000000000c7d713b49da00000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000418b0cf5ec8225b03027bce4ca66cae187922072ed630c0122e13d4e0780f42db04bec58133fced1eb7569b269c2fccae2838375367a56c8f0d0a700e11f03865a1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

// Encode the input data as a hex string
const encodedData = inputData;

// Create a transaction object
const tx = {
    to: contractAddress,
    data: encodedData,
    gasLimit: ethers.utils.hexlify(1000000), // Adjust the gas limit as needed
};

// Send the transaction to the contract's fallback function
provider.call(tx)
    .then((txResponse) => {
        console.log('Transaction sent:', txResponse.hash);
        // Wait for the transaction to be mined
        return provider.waitForTransaction(txResponse.hash);
    })
    .then((txReceipt) => {
        console.log('Transaction mined:', txReceipt.transactionHash);
    })
    .catch((error) => {
        console.error('Error:', error);
    });